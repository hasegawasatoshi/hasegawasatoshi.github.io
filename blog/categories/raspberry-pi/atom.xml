<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: raspberry pi | Satoshi's Blog]]></title>
  <link href="http://hasegawasatoshi.github.io/blog/categories/raspberry-pi/atom.xml" rel="self"/>
  <link href="http://hasegawasatoshi.github.io/"/>
  <updated>2015-02-08T03:04:14+09:00</updated>
  <id>http://hasegawasatoshi.github.io/</id>
  <author>
    <name><![CDATA[hasegawasatoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Bluetooth on Raspberry Pi]]></title>
    <link href="http://hasegawasatoshi.github.io/blog/2015/01/25/using-bluethooth-on-raspberry-pi/"/>
    <updated>2015-01-25T15:38:49+09:00</updated>
    <id>http://hasegawasatoshi.github.io/blog/2015/01/25/using-bluethooth-on-raspberry-pi</id>
    <content type="html"><![CDATA[<p>今回はRaspberry PiでBluetoothを使えるようにしたいと思います。</p>

<p>Bluetoothのドングルは<a href="http://www.planex.co.jp/products/bt-micro4/">PLANEX の BT-Micro4</a>を使いました。BLEタグと接続するので、Bluetooth 4.0対応のものが必要です。</p>

<!-- more -->


<p>Bluethoothを扱うためにBluezをインストールします。<a href="http://stackoverflow.com/questions/24853597/ble-gatttool-cannot-connect-even-though-device-is-discoverable-with-hcitool-lesc">こちら</a>によるとBluezはソースから最新版を入れたほうがよさそうです。</p>

<pre><code>pi@raspberrypi ~ $ sudo apt-get install libusb-dev libdbus-1-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev
pi@raspberrypi ~ $ sudo wget https://www.kernel.org/pub/linux/bluetooth/bluez-5.27.tar.xz
pi@raspberrypi ~ $ sudo tar xvf bluez-5.27.tar.xz
pi@raspberrypi ~ $ cd bluez-5.27/
pi@raspberrypi ~/bluez-5.27 $ sudo LDFLAGS=-lrt./configure --disable-systemd
pi@raspberrypi ~/bluez-5.27 $ make
pi@raspberrypi ~/bluez-5.27 $ sudo make install
</code></pre>

<blockquote><p>下記のようなエラーが<code>LDFLAG</code>に<code>-lrt</code>を付けてみてください。</p>

<pre><code>/usr/bin/ld: profiles/health/mcap.o: undefined reference to symbol 'clock_getres@@GLIBC_2.4'
//lib/arm-linux-gnueabihf/librt.so.1: error adding symbols: DSO missing from command line
collect2: ld returned 1 exit status
Makefile:4184: recipe for target 'tools/mcaptest' failed
make[1]: *** [tools/mcaptest] Error 1
Makefile:2648: recipe for target 'all' failed
make: *** [all] Error 2
</code></pre>

<p>参考: <a href="http://www.forum-raspberrypi.de/Thread-raspbian-bluez-5-x-kann-nicht-erstellt-werden">http://www.forum-raspberrypi.de/Thread-raspbian-bluez-5-x-kann-nicht-erstellt-werden</a></p></blockquote>

<p>まず、ドングルがUSB機器として認識しているかを確認します。</p>

<pre><code>pi@raspberrypi ~ $ lsusb
Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.
Bus 001 Device 006: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)
Bus 001 Device 005: ID 0411:01a2 BUFFALO INC. (formerly MelCo., Inc.) WLI-UC-GNM Wireless LAN Adapter [Ralink RT8070]
</code></pre>

<p>ちゃんと認識されました。</p>

<p><code>hciconfig</code>を用いて状態を確認します。</p>

<pre><code>pi@raspberrypi ~ $ hciconfig
hci0:     Type: BR/EDR  Bus: USB
     BD Address: 00:1B:DC:06:0C:04  ACL MTU: 310:10  SCO MTU: 64:8
     DOWN
     RX bytes:547 acl:0 sco:0 events:27 errors:0
     TX bytes:384 acl:0 sco:0 commands:27 errors:0
</code></pre>

<p>上のように<code>Down</code>状態だったら起動します。</p>

<pre><code>pi@raspberrypi ~ $ sudo hciconfig hci0 up
pi@raspberrypi ~ $ hciconfig
hci0:     Type: BR/EDR  Bus: USB
     BD Address: 00:1B:DC:06:0C:04  ACL MTU: 310:10  SCO MTU: 64:8
     UP RUNNING
     RX bytes:1094 acl:0 sco:0 events:54 errors:0
     TX bytes:768 acl:0 sco:0 commands:54 errors:0
</code></pre>

<p>WICED Senseの電源を入れ、スキャンします。</p>

<pre><code>pi@raspberrypi ~ $ sudo hcitool lescan
LE Scan ...
00:10:18:01:07:F1 WICED Sense Kit
00:10:18:01:07:F1 (unknown)
00:10:18:01:07:F1 WICED Sense Kit
00:10:18:01:07:F1 (unknown)
... (snip) ...
</code></pre>

<p>WICED Senseのアドレスが<code>00:10:18:01:07:F1</code>であることが分かりました。
ひたすらログが出続けるのでCTRL-Cで止めます。</p>

<p>実際に接続できるか確認してみましょう。</p>

<pre><code>pi@raspberrypi ~ $ sudo hcitool lecc 00:10:18:01:07:F1
Connection handle 71
</code></pre>

<p>問題なさそうなので<code>gatttool</code>を使って、インタラクティブモードで接続してみます。</p>

<pre><code>pi@raspberrypi ~ $ sudo gatttool -b 00:10:18:01:07:F1 -I
[00:10:18:01:07:F1][LE]&gt; connect
Attempting to connect to 00:10:18:01:07:F1
Connection successful
[00:10:18:01:07:F1][LE]&gt; primary
Command Failed: Disconnected
[00:10:18:01:07:F1][LE]&gt;
</code></pre>

<p>最初は接続できるものの、すぐに切断されてしまい、<code>primary</code>コマンドがエラーとなります。</p>

<p>ノンインタラクティブモードなら大丈夫のようです。</p>

<pre><code>pi@raspberrypi ~ $ sudo gatttool -b 00:10:18:01:07:F1  --primary
attr handle = 0x0001, end grp handle = 0x0001 uuid: 00001801-0000-1000-8000-00805f9b34fb
attr handle = 0x0014, end grp handle = 0x0018 uuid: 00001800-0000-1000-8000-00805f9b34fb
attr handle = 0x0028, end grp handle = 0x002b uuid: 739298b6-87b6-4984-a5dc-bdc18b068985
attr handle = 0x004d, end grp handle = 0x0053 uuid: 0000180a-0000-1000-8000-00805f9b34fb
attr handle = 0x0061, end grp handle = 0x0063 uuid: 0000180f-0000-1000-8000-00805f9b34fb
attr handle = 0xff00, end grp handle = 0xff07 uuid: a86abc2d-d44c-442e-99f7-80059a873e36
</code></pre>

<pre><code>pi@raspberrypi ~ $ sudo gatttool -b 00:10:18:01:07:F1  --characteristics
handle = 0x0015, char properties = 0x02, char value handle = 0x0016, uuid = 00002a00-0000-1000-8000-00805f9b34fb
handle = 0x0017, char properties = 0x02, char value handle = 0x0018, uuid = 00002a01-0000-1000-8000-00805f9b34fb
handle = 0x0029, char properties = 0x12, char value handle = 0x002a, uuid = 33ef9113-3b55-413e-b553-fea1eaada459
handle = 0x004e, char properties = 0x02, char value handle = 0x004f, uuid = 00002a29-0000-1000-8000-00805f9b34fb
handle = 0x0050, char properties = 0x02, char value handle = 0x0051, uuid = 00002a24-0000-1000-8000-00805f9b34fb
handle = 0x0052, char properties = 0x02, char value handle = 0x0053, uuid = 00002a23-0000-1000-8000-00805f9b34fb
handle = 0x0062, char properties = 0x02, char value handle = 0x0063, uuid = 00002a19-0000-1000-8000-00805f9b34fb
handle = 0xff01, char properties = 0x18, char value handle = 0xff02, uuid = 1bd19c14-b78a-4e0f-aeb5-8e0352bac382
handle = 0xff04, char properties = 0x08, char value handle = 0xff05, uuid = 279f9dab-79be-4663-af1d-24407347af13
handle = 0xff06, char properties = 0x02, char value handle = 0xff07, uuid = 6aa5711b-0376-44f1-bca1-8647b48bdb55
</code></pre>

<p>切断されてしまう原因が分からないのですが、ノンインタラクティブモードで進めてみましょう。</p>

<p><code>Manufacturer Name String</code>を取得してみます。</p>

<pre><code>pi@raspberrypi ~ $ sudo gatttool -b 00:10:18:01:07:F1  --char-read --handle=0x004f
Characteristic value/descriptor: 42 72 6f 61 64 63 6f 6d
pi@raspberrypi ~ $ echo "42 72 6f 61 64 63 6f 6d" | tr -d \ | xxd -r -p; echo ""
Broadcom
</code></pre>

<p>期待通り<code>Broadcom</code>という文字列が取得できました。</p>

<p>では、本来の目的であるセンサー情報を取得してみます。<a href="http://stackoverflow.com/questions/15657007/bluetooth-low-energy-listening-for-notifications-indications-in-linux">ここ</a>を参考に、<code>notification</code>を受け取るために<code>0x0100</code>を書き込みます。</p>

<pre><code>sudo gatttool -b 00:10:18:01:07:F1 --char-write-req --handle=0x002b --value=0100 --listen
Characteristic value was written successfully
Notification handle = 0x002a value: 0b 00 00 01 00 53 00 11 06 3d e9 d5 03 d6 03 a8 ff 56 fb
Notification handle = 0x002a value: 0b 00 00 01 00 52 00 11 06 3d e9 d5 03 d9 03 9f ff 5b fb
Notification handle = 0x002a value: 0b 00 00 02 00 53 00 11 06 3d e9 d5 03 ed 03 a1 ff 61 fb
Notification handle = 0x002a value: 0b 00 00 01 00 52 00 11 06 3d e9 d5 03 d9 03 a1 ff 5d fb
Notification handle = 0x002a value: 0b 00 00 01 00 53 00 11 06 3d e9 d5 03 df 03 a1 ff 59 fb
Notification handle = 0x002a value: 0b 00 00 01 00 53 00 11 06 3d e9 d5 03 db 03 a0 ff 5d fb
Notification handle = 0x002a value: 0b 00 00 01 00 53 00 11 06 3d e9 d5 03 e0 03 9e ff 51 fb
Notification handle = 0x002a value: 0b 00 00 01 00 53 00 11 06 3d e9 d5 03 d6 03 a3 ff 52 fb
Notification handle = 0x002a value: 0b 00 00 01 00 53 00 11 06 3d e9 d5 03 de 03 9a ff 61 fb
Notification handle = 0x002a value: 34 09 02 79 27 a8 00
Notification handle = 0x002a value: 0b 00 00 02 00 52 00 11 06 3d e9 d5 03 e9 03 93 ff 54 fb
Notification handle = 0x002a value: 0b 00 00 02 00 52 00 11 06 3d e9 d5 03 e0 03 a7 ff 5d fb
Notification handle = 0x002a value: 0b 00 00 02 00 53 00 11 06 3d e9 d5 03 e0 03 9f ff 65 fb
Notification handle = 0x002a value: 0b 00 00 02 00 53 00 11 06 3d e9 d5 03 e5 03 9a ff 5d fb
Notification handle = 0x002a value: 0b 00 00 02 00 52 00 11 06 3d e9 d5 03 d3 03 9c ff 55 fb
Notification handle = 0x002a value: 0b 00 00 02 00 53 00 11 06 3d e9 d5 03 dc 03 9f ff 54 fb
Notification handle = 0x002a value: 0b ff ff 02 00 53 00 11 06 3d e9 d5 03 da 03 93 ff 5f fb
</code></pre>

<p>無事、センサーデータを取得できたのですが、やはい、１秒くらいで接続が切れてしまいます。</p>

<p><code>hcidump</code>でパケットをキャプチャしてみたところ、WICED Senseから接続を切っているようですが。。。今日のところはここで手詰まりです。</p>

<pre><code>&gt; ACL data: handle 71 flags 0x02 dlen 26
    ATT: Handle notify (0x1b)
      handle 0x002a
      value 0x0b 0x00 0x00 0x01 0x00 0x53 0x00 0x11 0x06 0x3d 0xe9 0xd5 0x03 0xff 0x03 0x06 0x00 0x86 0xfb
&gt; ACL data: handle 71 flags 0x02 dlen 26
    ATT: Handle notify (0x1b)
      handle 0x002a
      value 0x0b 0x00 0x00 0x02 0x00 0x52 0x00 0x11 0x06 0x3d 0xe9 0xd5 0x03 0x13 0x04 0x05 0x00 0x95 0xfb
&lt; HCI Command: Disconnect (0x01|0x0006) plen 3
    handle 71 reason 0x13
    Reason: Remote User Terminated Connection
&gt; HCI Event: Command Status (0x0f) plen 4
    Disconnect (0x01|0x0006) status 0x00 ncmd 1
&gt; ACL data: handle 71 flags 0x02 dlen 26
    ATT: Handle notify (0x1b)
      handle 0x002a
      value 0x0b 0x00 0x00 0x02 0x00 0x53 0x00 0x11 0x06 0x3d 0xe9 0xd5 0x03 0x07 0x04 0x02 0x00 0x90 0xfb
&gt; HCI Event: Disconn Complete (0x05) plen 4
    status 0x00 handle 71 reason 0x16
    Reason: Connection Terminated by Local Host
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://nwpct1.hatenablog.com/entry/2013/10/19/190029">http://nwpct1.hatenablog.com/entry/2013/10/19/190029</a></li>
<li><a href="http://developer.mbed.org/users/kazu_zamasu/notebook/BLEforLinux/">http://developer.mbed.org/users/kazu_zamasu/notebook/BLEforLinux/</a></li>
<li><a href="http://www.elinux.org/RPi_Bluetooth_LE">http://www.elinux.org/RPi_Bluetooth_LE</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a Raspberry Pi]]></title>
    <link href="http://hasegawasatoshi.github.io/blog/2015/01/17/setting-up-a-raspberry-pi/"/>
    <updated>2015-01-17T23:45:41+09:00</updated>
    <id>http://hasegawasatoshi.github.io/blog/2015/01/17/setting-up-a-raspberry-pi</id>
    <content type="html"><![CDATA[<p>今回はRaspBerry Piののセットアップを行います。使用したのは<a href="http://jp.rs-online.com/web/p/processor-microcontroller-development-kits/8111284/">RrspBerry Pi B+</a>です。</p>

<p>RaspBerry Piのセットアップに関してはいろいろな方が書かれているので今更感もありますが、無線LANのセットアップまで行いたいと思います。</p>

<!-- more -->


<p><a href="http://www.raspberrypi.org/downloads/">ダウンロードサイト</a>からOSイメージをダウンロードします。NOOBSというインストーラーもありますが、今回はOSを直接インストールします。ディストリビューションはDebianベースのRASPBIANを選びました。RPM派の人はFedoraベースのPIDORAでもよいと思います。</p>

<p>OSイメージをダウンロードしてmicroSDに書き込むわけですが、今回はMacを使って書き込みます。</p>

<p>まず、microSDをMacに差してマウントポイントを確認します。下記の例だと <code>/dev/disk5s1</code> が対象となるmicorSDです。</p>

<pre><code>$ df -h
Filesystem      Size   Used  Avail Capacity  iused   ifree %iused  Mounted on
/dev/disk1     112Gi   99Gi   12Gi    89% 26085623 3237639   89%   /
devfs          194Ki  194Ki    0Bi   100%      670       0  100%   /dev
map -hosts       0Bi    0Bi    0Bi   100%        0       0  100%   /net
map auto_home    0Bi    0Bi    0Bi   100%        0       0  100%   /home
/dev/disk4s1    29Gi  1.4Gi   28Gi     5%   358216 7354538    5%   /Volumes/T
/dev/disk5s1   3.7Gi  803Mi  2.9Gi    22%        0       0  100%   /Volumes/NO NAME
</code></pre>

<p>ディスクをアンマウントします。</p>

<pre><code>$ sudo diskutil unmountDisk /dev/disk5
Unmount of all volumes on disk5 was successful
</code></pre>

<p><code>dd</code> コマンドを使って書き込みます。microSDの書き込み性能にもよると思いますが、かなり時間がかかるので気長に待ちます。</p>

<pre><code>$ sudo dd if=./2014-12-24-wheezy-raspbian.img of=/dev/disk5 bs=1m
3125+0 records in
3125+0 records out
3276800000 bytes transferred in 4491.168493 secs (729610 bytes/sec)
</code></pre>

<p>Rrapberry PiにmicroSDを差して電源を入れるとOSが起動します。設定メニューが出るので初期設定を行います。目的次第なのですが、以下のように設定しました。</p>

<ul>
<li>[Expand Filesystem] を選択し、SDカードの全領域を使えるように拡張します。</li>
<li>[Internationalisation Option] - [Change Locale] を選択し、ロケールの追加を行います。日本語を使う予定はないのですが、一応、[ja_JP.UTF-8]を追加しておきました。</li>
<li>[Internatinalisation Option] - [Change Timezone] を選択し、タイムゾーンを選択します。[Asia] - [Tokyo] を選択しました。</li>
<li>[Advanced Option] - [Memory Split] を選択し 64 → 16に 変更します。今回はGUIを使わないので、GPUへの割り当てを16MBに減らします。</li>
</ul>


<p>次に無線LANのセットアップを行います。おそらく、大抵の無線LANアダプターが使えると思いますが、BUFFALOの<a href="http://www.amazon.co.jp/gp/product/B003NSAMW2?psc=1&amp;redirect=true&amp;ref_=oh_aui_detailpage_o01_s00">WLI-UC-GNM</a>を使いました。</p>

<p>まず、無線LANアダプターをUSBポートに差して認識していることを確認します。</p>

<pre><code>Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.
Bus 001 Device 005: ID 0411:01a2 BUFFALO INC. (formerly MelCo., Inc.) WLI-UC-GNM Wireless LAN Adapter [Ralink RT8070]
</code></pre>

<p><code>wpa_passphrase</code> コマンドを用いてパスフェーズの暗号化を行います。</p>

<pre><code>pi@raspberrypi ~ $ wpa_passphrase ${SSID} ${PASSPHRASE} 
network={
     ssid="${SSID}"
     #psk="${PASSPHRASE}"
     psk=55125564e034badc3177c3ae7fac2e4cf787a44af3d4b40873b55c42f071a733
}
</code></pre>

<p>次に、生成された内容を <code>/etc/wpa_supplicant/wpa_supplicant.conf</code> に追加します。うちのアクセスポイントはWPA/WPA2 AESで接続するので、以下のようになりました。</p>

<pre><code>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
     ssid="${SSID}"
     proto=RSN
     key_mgmt=WPA-PSK
     pairwise=CCMP
     group=CCMP
     psk=55125564e034badc3177c3ae7fac2e4cf787a44af3d4b40873b55c42f071a733
}
</code></pre>

<p>続けて <code>/etc/network/interfaces</code> を変更します。</p>

<pre><code>auto lo

iface lo inet loopback
iface eth0 inet dhcp

allow-hotplug wlan0
#iface wlan0 inet manual
#wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
iface wlan0 inet dhcp
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
iface default inet dhcp
</code></pre>

<p>設定が完了したのでインタフェースを再起動します。</p>

<pre><code>pi@raspberrypi ~ $ sudo ifup wlan0
Internet Systems Consortium DHCP Client 4.2.2
Copyright 2004-2011 Internet Systems Consortium.
All rights reserved.
For info, please visit https://www.isc.org/software/dhcp/

Listening on LPF/wlan0/cc:e1:d5:15:84:27
Sending on   LPF/wlan0/cc:e1:d5:15:84:27
Sending on   Socket/fallback
DHCPDISCOVER on wlan0 to 255.255.255.255 port 67 interval 6
DHCPDISCOVER on wlan0 to 255.255.255.255 port 67 interval 15
DHCPREQUEST on wlan0 to 255.255.255.255 port 67
DHCPOFFER from 192.168.3.1
DHCPACK from 192.168.3.1
bound to 192.168.3.18 -- renewal in 41016 seconds.
</code></pre>

<p>最後にホスト名で <code>ssh</code> 接続できるように <code>avahi-daemon</code> をインストールします。</p>

<pre><code>pi@raspberrypi ~ $ sudo apt-get update
pi@raspberrypi ~ $ sudo apt-get install avahi-daemon
</code></pre>

<p>Macから <code>ping</code> が通ればOKです。</p>

<pre><code>$ ping raspberrypi.local
PING raspberrypi.local (192.168.3.17): 56 data bytes
64 bytes from 192.168.3.17: icmp_seq=0 ttl=64 time=5.404 ms
64 bytes from 192.168.3.17: icmp_seq=1 ttl=64 time=6.617 ms
64 bytes from 192.168.3.17: icmp_seq=2 ttl=64 time=5.839 ms
64 bytes from 192.168.3.17: icmp_seq=3 ttl=64 time=5.881 ms
64 bytes from 192.168.3.17: icmp_seq=4 ttl=64 time=5.708 ms
^C
--- raspberrypi.local ping statistics ---
5 packets transmitted, 5 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 5.404/5.890/6.617/0.400 ms
</code></pre>

<h3>References</h3>

<ul>
<li>超小型PC「Raspberry Pi」で夏休み自由課題: <a href="http://news.mynavi.jp/articles/2014/08/13/raspberry-pi/">http://news.mynavi.jp/articles/2014/08/13/raspberry-pi/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
